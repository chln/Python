#-*- coding: utf-8 -*-
import re
#我们有sas,saas,saaas，我们想要sas和saas，我们怎么处理呢？
key = r"saas and sas and saaas"
p1 = r"sa{1,2}s"
#为了能够准确的控制重复次数，正则表达式还提供
#{a,b}(代表a<=匹配次数<=b)
#如果你省略掉{1,2}中的2，那么就代表至少匹配一次，那么就等价于？
#如果你省略掉{1,2}中的1，那么就代表至多匹配2次。
pattern1 = re.compile(p1)
print pattern1.findall(key)

#元字符	说明
#.	代表任意字符
#\	
#[ ]	匹配内部的任一字符或子表达式
#[^]	对字符集和取非
#-	定义一个区间
#\	对下一字符取非（通常是普通变特殊，特殊变普通）
#*	匹配前面的字符或者子表达式0次或多次
#*?	惰性匹配上一个
#+	匹配前一个字符或子表达式一次或多次
#+?	惰性匹配上一个
#?	匹配前一个字符或子表达式0次或1次重复
#{n}	匹配前一个字符或子表达式
#{m,n}	匹配前一个字符或子表达式至少m次至多n次
#{n,}	匹配前一个字符或者子表达式至少n次
#{n,}?	前一个的惰性匹配
#^	匹配字符串的开头
#\A	匹配字符串开头
#$	匹配字符串结束
#[\b]	退格字符
#\c	匹配一个控制字符
#\d	匹配任意数字
#\D	匹配数字以外的字符
#\t	匹配制表符
#\w	匹配任意数字字母下划线
#\W	不匹配数字字母下划线